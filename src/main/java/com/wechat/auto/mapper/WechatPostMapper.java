package com.wechat.auto.mapper;

import com.wechat.auto.model.WechatPost;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Repository;

import java.util.Date;
import java.util.List;

@Repository
public interface WechatPostMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table postTable
     *
     * @mbggenerated
     */
    @Delete({
        "delete from postTable",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table postTable
     *
     * @mbggenerated
     */
    @Insert({
        "insert into postTable (id, biz, ",
        "appmsgid, title, ",
        "digest, contenturl, ",
        "sourceurl, cover, ",
        "datetime, readnum, ",
        "likenum, isspider, ",
        "author, nickname, ",
        "weight, posttype, ",
        "content)",
        "values (#{id,jdbcType=INTEGER}, #{biz,jdbcType=VARCHAR}, ",
        "#{appmsgid,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, ",
        "#{digest,jdbcType=VARCHAR}, #{contenturl,jdbcType=VARCHAR}, ",
        "#{sourceurl,jdbcType=VARCHAR}, #{cover,jdbcType=VARCHAR}, ",
        "#{datetime,jdbcType=TIMESTAMP}, #{readnum,jdbcType=INTEGER}, ",
        "#{likenum,jdbcType=INTEGER}, #{isspider,jdbcType=INTEGER}, ",
        "#{author,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, ",
        "#{weight,jdbcType=INTEGER}, #{posttype,jdbcType=INTEGER}, ",
        "#{content,jdbcType=LONGVARCHAR})"
    })
    int insert(WechatPost record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table postTable
     *
     * @mbggenerated
     */
    int insertSelective(WechatPost record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table postTable
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
        "likenum, isspider, author, nickname, weight, posttype, content",
        "from postTable",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @ResultMap("ResultMapWithBLOBs")
    WechatPost selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table postTable
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(WechatPost record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table postTable
     *
     * @mbggenerated
     */
    @Update({
        "update postTable",
        "set biz = #{biz,jdbcType=VARCHAR},",
          "appmsgid = #{appmsgid,jdbcType=VARCHAR},",
          "title = #{title,jdbcType=VARCHAR},",
          "digest = #{digest,jdbcType=VARCHAR},",
          "contenturl = #{contenturl,jdbcType=VARCHAR},",
          "sourceurl = #{sourceurl,jdbcType=VARCHAR},",
          "cover = #{cover,jdbcType=VARCHAR},",
          "datetime = #{datetime,jdbcType=TIMESTAMP},",
          "readnum = #{readnum,jdbcType=INTEGER},",
          "likenum = #{likenum,jdbcType=INTEGER},",
          "isspider = #{isspider,jdbcType=INTEGER},",
          "author = #{author,jdbcType=VARCHAR},",
          "nickname = #{nickname,jdbcType=VARCHAR},",
          "weight = #{weight,jdbcType=INTEGER},",
          "posttype = #{posttype,jdbcType=INTEGER},",
          "content = #{content,jdbcType=LONGVARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKeyWithBLOBs(WechatPost record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table postTable
     *
     * @mbggenerated
     */
    @Update({
        "update postTable",
        "set biz = #{biz,jdbcType=VARCHAR},",
          "appmsgid = #{appmsgid,jdbcType=VARCHAR},",
          "title = #{title,jdbcType=VARCHAR},",
          "digest = #{digest,jdbcType=VARCHAR},",
          "contenturl = #{contenturl,jdbcType=VARCHAR},",
          "sourceurl = #{sourceurl,jdbcType=VARCHAR},",
          "cover = #{cover,jdbcType=VARCHAR},",
          "datetime = #{datetime,jdbcType=TIMESTAMP},",
          "readnum = #{readnum,jdbcType=INTEGER},",
          "likenum = #{likenum,jdbcType=INTEGER},",
          "isspider = #{isspider,jdbcType=INTEGER},",
          "author = #{author,jdbcType=VARCHAR},",
          "nickname = #{nickname,jdbcType=VARCHAR},",
          "weight = #{weight,jdbcType=INTEGER},",
          "posttype = #{posttype,jdbcType=INTEGER}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(WechatPost record);

    @Select({
            "select",
            "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
            "likenum, isspider, author, nickname, weight, posttype, content",
            "from postTable",
            "where posttype = #{posttype,jdbcType=INTEGER}"
    })
    @ResultMap("ResultMapWithBLOBs")
    List<WechatPost> getPostByType(@Param("posttype") Integer posttype);

    @Select({
            "select",
            "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
            "likenum, isspider, author, nickname, weight, posttype, content",
            "from postTable",
            "where posttype = #{posttype,jdbcType=INTEGER} and datetime >=#{datetime,jdbcType=TIMESTAMP}",
            "order by weight DESC"
    })
    @ResultMap("ResultMapWithBLOBs")
    List<WechatPost> getPostByTypeInWeek(@Param("posttype") Integer posttype, @Param("datetime") Date time);


    @Select({
            "select",
            "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
            "likenum, isspider, author, nickname, weight, posttype, content",
            "from postTable",
            "where contenturl = #{contenturl,jdbcType=VARCHAR}"
    })
    @ResultMap("ResultMapWithBLOBs")
    WechatPost getPostByUrl(@Param("contenturl") String contenturl);

    @Select({
            "select",
            "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
            "likenum, isspider, author, nickname, weight, posttype, content",
            "from postTable",
            "where appmsgid = #{appmsgid,jdbcType=VARCHAR}"
    })
    @ResultMap("ResultMapWithBLOBs")
    WechatPost getPostByAppMsId(@Param("appmsgid") String appmsgid);

    @Select({
            "select",
            "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
            "likenum, isspider, author, nickname, weight, posttype, content",
            "from postTable"
    })
    @ResultMap("ResultMapWithBLOBs")
    List<WechatPost> getAllPost();

    @Select({
            "select",
            "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
            "likenum, isspider, author, nickname, weight, posttype, content",
            "from postTable",
            "where isspider = #{isspider,jdbcType=INTEGER}"
    })
    @ResultMap("ResultMapWithBLOBs")
    List<WechatPost> getAllUnSpiderPost(@Param("isspider") Integer isspider);

    @Delete({
            "delete from postTable"
    })
    int deleteAllData();

    @Delete({
            "delete from postTable",
            "where contenturl = #{contenturl,jdbcType=VARCHAR}"
    })
    int deleteByRequestUrl(@Param("contenturl") String contenturl);


    @Select({"<script>",
            "select",
            "id, biz, appmsgid, title, digest, contenturl, sourceurl, cover, datetime, readnum, ",
            "likenum, isspider, author, nickname, weight, posttype, content",
            "from postTable where nickname in ",
            "<foreach item='item' collection='nickname' open='(' close=')' separator=','>",
            "#{item}",
            "</foreach>",
            " and datetime >=#{datetime,jdbcType=TIMESTAMP}",
            "order by weight DESC",
            "</script>"
    })
    @ResultMap("ResultMapWithBLOBs")
    List<WechatPost> getATAPosts(@Param("nickname") List<String> nickname, @Param("datetime") Date time);
}